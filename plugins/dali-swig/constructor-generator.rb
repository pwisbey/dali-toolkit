#!/usr/bin/env ruby
# encoding: utf-8
require 'pathname'
require 'scanf'
require 'fileutils'
#
# DALi traditonally use a static New function to create an object.
# E.g. Actor myActor = Actor::New();
#
# However it has been request that for the CSharp DALi API we this coding convention
#
#  Actor myActor = new Actor();
#
# Script does the follow:
#
# - greps dali csharp wrapper files for the class constructor (new Actor()) and the static New() e.g. functions ( TextLabel::New(), TextLabel::New( string label) )
#
# regexp for searching swig generated constructors grep  -oP -n  'public [A-Z]([A-Z]*[a-z])*\(\)'  *
# regexp for searching for swig genereated New functions  grep -oP -n -i 'static [a-zA-Z]\+ New'


$fileHeader = "/*"\
 "* Copyright (c) #{Time.now.year} Samsung Electronics Co., Ltd.\n"\
 "*\n"\
 "* Licensed under the Apache License, Version 2.0 (the \"License\");\n"\
 "* you may not use this file except in compliance with the License.\n"\
 "* You may obtain a copy of the License at\n"\
 "*\n"\
 "* http://www.apache.org/licenses/LICENSE-2.0\n"\
 "*\n"\
 "* Unless required by applicable law or agreed to in writing, software\n"\
 "* distributed under the License is distributed on an \"AS IS\" BASIS,\n"\
 "* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"\
 "* See the License for the specific language governing permissions and\n"\
 "* limitations under the License.\n"\
 "*\n"\
 "*/\n"\
 "// This File has been auto-generated by SWIG and then modified using DALi Ruby Scripts\n"

# global paths
$rootPath = ""
$daliCSharpPath = ""
$totalDaliClasses = 0
$totalConstructorsGenerated = 0


$swigConstructorNumLines = 3
$swigNewFuncNumLines = 4


# daliClass struct stores information about where the constructor / static New functions are in the file
$daliClassStruct = Struct.new("DaliClass", :name, :file, :hasNewFunction, :hasConstructor, :constructorLine, :staticNewLines, :generatedConstructors)

# Array
$daliClassArray = Array.new

def init

    pn = Pathname.new(Dir.pwd)
    fullPath = pn.to_s

    $rootPath = fullPath.slice(0..( fullPath.index('/dali-toolkit')))
    $daliCSharpPath = $rootPath + "dali-toolkit/plugins/dali-swig/csharp"
    puts("--------------------------------------------")
    puts("Modifying constructors for DALi C# files ")
    puts("E.g. modify TextLabel::New() ==>  new TextLabel() ")
    puts("")


end

def getDaliClassItem( className )

   # puts( "getDaliClassItem  "+ className )
    index = $daliClassArray.index{ |a| a.name == className }

    if( index == nil)
        # create a new item along with a array for it's properites
        classItem = $daliClassStruct.new( className );

        classItem.name = className
        classItem.hasNewFunction = false
        classItem.hasConstructor = false
        classItem.generatedConstructors = Array.new
        classItem.staticNewLines =  Array.new

        $daliClassArray.push( classItem )

    else

        classItem = $daliClassArray[ index ]
    end

    return classItem;

end

def grepConstructorInfo

    # grep for strings like    public Actor(), have to use double black slash on the parenthesis for some reason
   result =`grep -oP -n "public [A-Z]([A-Z]*[0-9]*[a-z])*\\(\\)"   #{$daliCSharpPath}/*`

   # result is an array of lines that look like this:
   #  /homepath/dali-toolkit/plugins/dali-swig/csharp/Window.cs:66:public Window()

   lines = result.split(/\n+/);
   for line in lines

      # Split the line into file name, line number
      data  = line.split(":",3)
      fileName = data[0];
      lineNum = data[1]


      # Get the class name from the filename
      className =  File.basename(fileName,".cs")

       # get or create a new DALi class item which stores the new / constructor information
      classItem  = getDaliClassItem( className )

      classItem.file = fileName
      classItem.constructorLine = lineNum.to_i
      classItem.hasConstructor = true
    #  puts classItem.name

    end

end



def grepStaticNewInfo

    # grep for strings like    static Actor::New()
   result =`grep -oP -n -i "static [a-zA-Z0-9]\+ New"   #{$daliCSharpPath}/*`

   lines = result.split(/\n+/);
   for line in lines

      #puts line
      # Split the line into file name and property macro, split 2 means just create two strings
      data  = line.split(":",3)
      fileName = data[0];
      lineNum = data[1]

        #  # Get the class name from the filename  ( e.g. image-actor-impl.cpp => image-actor)
      className = File.basename(fileName,".cs")

       # get or create a new DALi class item which stores the property information
      classItem  = getDaliClassItem( className )

      classItem.file = fileName
      classItem.hasNewFunction = true
      classItem.staticNewLines.push( lineNum.to_i )
     # puts "added line number #{lineNum} for #{classItem.name}"

    end

end




def generateNewConstructors
    todo = 2

    for daliClass in  $daliClassArray

        # if the class doesn't have a New function and a constructor then skip it
        if ! (daliClass.hasNewFunction && daliClass.hasConstructor)
            #puts( "Doesn't have a New function #{daliClass.file}" )
            next
        end

        File.open(daliClass.file, 'r+') do |file|

          currentLine = 0
          for newEntryLine in daliClass.staticNewLines
              linesToRead = newEntryLine - currentLine -1
            #  puts("lineToRead = #{linesToRead} #{newEntryLine}")
              linesToRead.times{  file.gets }

              currentLine += linesToRead +$swigConstructorNumLines # +3 for 3 lines of the New function that we read in below
              line =  file.readline
              #puts("line = #{line} _________")
              parameterString = /\((.*)\)/.match(line) # pulls out the New parameter e.g. (float duration)

              #read the next line
              #file.gets
              line =  file.readline
              constructorCall = /\((.*)\)/.match(line) # pulls out the constructor call e.g. ((NDalicPINVOKE.TextLabel_New__SWIG_1(text), true))

              exceptionLine =  file.readline

              #res = file.line.line.grep(/asd/i)
              constructorCode = "  public #{daliClass.name} #{parameterString} : this #{constructorCall} {\n"\
                                "  #{exceptionLine}\n"\
                                "  }\n"


              daliClass.generatedConstructors.push( constructorCode )
              #puts constructorCode
          end # for
      end  # file open
    end # for
end

def InjectConstructors( daliClass, file )

  for code in daliClass.generatedConstructors
      file.puts( code )
      #puts code
      $totalConstructorsGenerated+=1
  end
end

def lineShouldBeSkipped(daliClass, line)

  if line.between?(daliClass.constructorLine-1, daliClass.constructorLine+$swigConstructorNumLines -1)
    return true
  end


  for n in daliClass.staticNewLines
    if line.between?(n-1, n+$swigNewFuncNumLines )
      return true
    end
  end

  return false
end


# helper class to color the background
class String
def blueBackground;   "\e[45m#{self}\e[0m" end
end

def updateCSharpFiles

  # we now have a populated array of daliClassStructs.
  # With each class we open it's SWIG generated csharp file
  # create a new temp file, and copy the SWIG generated code over to the temporary one
  # except for the existing constructors and New() functions. e.g. Actor() and Actor::New()
  # We also inject our new constructor functions e.g. Actor()

  for daliClass in  $daliClassArray
     #  puts "writing file #{daliClass.name}..."

      # check the class has some constructors to write
      if (daliClass.generatedConstructors.length == 0 )
        #   puts "no constructors for  #{daliClass.name}..."
        next
      end

      if daliClass.name == "Application"
        next
      end

      $totalDaliClasses+=1  # for stats

      # create a file to store the modified output
      tempFileName = "#{daliClass.file}.tmp"
      tempFile = File.new(tempFileName, 'w')

      tempFile.puts $fileHeader
      currentLine = 0
      # open the the file
      constructorsWritten = false

      File.open(daliClass.file, 'r') do |file|

        file.each do |line|

          if lineShouldBeSkipped( daliClass, currentLine ) # lineShouldBeSkipped ( daliClass, currentLine )
            currentLine +=1
            if( !constructorsWritten )
                # inject our newly generated constructors
              InjectConstructors( daliClass, tempFile );
              puts("Converting static Class::New(xxx) ---> new Class(xxx) into #{daliClass.name}".blueBackground)

              constructorsWritten = true  # only write our new constructors to the file once
            end
            next
          end # line should be skipped

          currentLine +=1
          tempFile.puts( line )

        end # file each
      end # file open

      tempFile.close

      # copy the temp file over the top of the exiting file
      FileUtils.mv tempFileName, daliClass.file

  end
  puts"\n"
  puts("Done. Generated #{$totalConstructorsGenerated} Constructors for #{$totalDaliClasses} DALi C# classes".blueBackground)



end

init
grepConstructorInfo
grepStaticNewInfo
generateNewConstructors
updateCSharpFiles


